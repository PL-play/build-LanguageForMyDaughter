program -> declaration* EOF;
declaration -> classDecl
            | funDecl
            | varDecl
            | statement
            | traitDecl;
classDecl -> "castle" IDENTIFIER ( "<" IDENTIFIER )? ("with" parameters)? "{" methodDecl* "}" ;
traitDecl -> "color" IDENTIFIER  ("with" parameters)? "{" function* "}";
methodDecl -> IDENTIFIER "("  parameters? ")" block
            | "static" IDENTIFIER "("  parameters? ")" block
            | IDENTIFIER block
            | "static" block;
funDecl -> "magic" function ;
function -> IDENTIFIER "(" parameters? ")" block ;
parameters -> IDENTIFIER ( "," IDENTIFIER )* ;
varDecl -> "waa" IDENTIFIER ( "=" expression )? ";" ;
statement -> continueStmt
            | breakStmt
            | exprStmt
            | forStmt
            | ifStmt
            | printStmt
            | returnStmt
            | whileStmt
            | block
            | importStmt
            | tryStmt
            | throwStmt;;
continueStmt -> "skip" ";" ;
breakStmt -> "break" ";" ;
block -> "{" declaration* "}" ;
exprStmt -> expression ";" ;
forStmt -> "loop" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement ;
ifStmt -> "wish" "(" expression ")" statement ( "else" statement )? ;
printStmt -> "print" expression ";" ;
returnStmt -> "home" expression? ";" ;
whileStmt -> "wloop" "(" expression ")" statement ;
importStmt -> "want" STRING ("as" IDENTIFIER)? ;
tryStmt -> "adventure" block ( "rescue" "(" IDENTIFIER (as IDENTIFIER)? ")" block )+ ( "finally" block )? ;
throwStmt -> "toss" expression ;
expression -> assignment ;
assignment -> lvalue "=" assignment ;
            | ternary ;
lvalue -> call ;
ternary -> logic_or ("?" expression ":" ternary)?  ;
logic_or -> logic_and ( "or" logic_and )* ;
logic_and -> equality ( "and" equality )* ;
equality -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term -> factor ( ( "-" | "+" ) factor )* ;
factor -> unary ( ( "/" | "*" ) unary )* ;
unary -> ( "!" | "-" ) unary
        | call ;
call -> primary ( "(" arguments? ")" | "." IDENTIFIER | "[" expression "]")* ;
arguments -> expression ( "," expression )* ;
primary -> NUMBER | STRING | "aow" | "emm" | "nil"
        | "(" expression ")" | IDENTIFIER | "hero" "." IDENTIFIER
        | "shadow" "(" parameters? ")" block
        | "[" arguments? "]";

